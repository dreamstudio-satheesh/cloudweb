
services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: cloud_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${DB_DATABASE:-cloud_hosting}
      MYSQL_USER: ${DB_USERNAME:-cloud_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-cloud_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - cloud_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache Service
  redis:
    image: redis:7.0-alpine
    container_name: cloud_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cloud_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # Laravel Application (PHP-FPM + Nginx)
  laravel:
    build:
      context: ./docker/laravel
      dockerfile: Dockerfile
    container_name: cloud_laravel
    restart: unless-stopped
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV}
      APP_KEY: ${APP_KEY}
      APP_DEBUG: ${APP_DEBUG}
      APP_URL: ${APP_URL}
    ports:
      - "8000:80"
    volumes:
      - ./laravel-app:/var/www/html
      - ./docker/laravel/nginx.conf:/etc/nginx/sites-available/default
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cloud_network

  # FastAPI Service
  fastapi:
    build:
      context: ./docker/fastapi
      dockerfile: Dockerfile
    container_name: cloud_fastapi
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./fastapi-app:/app
    ports:
      - "${FASTAPI_PORT:-8001}:8001"
    environment:
      - DATABASE_URL=mysql+pymysql://${DB_USERNAME}:${DB_PASSWORD}@mysql:3306/${DB_DATABASE}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - HETZNER_API_KEY=${HETZNER_API_KEY}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloud_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      timeout: 20s
      retries: 10
      start_period: 30s

  # phpMyAdmin for Database Management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: cloud_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      PMA_ARBITRARY: 1
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - cloud_network

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: cloud_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - laravel
      - fastapi
    networks:
      - cloud_network

  # Certbot for SSL certificates
  certbot:
    build:
      context: ./docker/certbot
      dockerfile: Dockerfile
    container_name: cloud_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
    depends_on:
      - nginx
    networks:
      - cloud_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  cloud_network:
    driver: bridge